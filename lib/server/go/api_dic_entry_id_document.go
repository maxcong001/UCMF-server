/*
 * Nucmf_UECapabilityManagement
 *
 * Nucmf_UECapabilityManagement Service. Â© 2020, 3GPP Organizational Partners (ARIB, ATIS, CCSA, ETSI, TSDSI, TTA, TTC). All rights reserved.
 *
 * API version: 1.0.2
 * Generated by: OpenAPI Generator (https://openapi-generator.tech)
 */

package openapi

import (
	"encoding/json"
	"fmt"
	"net/http"
	"strings"

	"github.com/gorilla/mux"
)

// A DicEntryIdDocumentApiController binds http requests to an api service and writes the service results to the http response
type DicEntryIdDocumentApiController struct {
	service DicEntryIdDocumentApiServicer
}

// NewDicEntryIdDocumentApiController creates a default api controller
func NewDicEntryIdDocumentApiController(s DicEntryIdDocumentApiServicer) Router {
	return &DicEntryIdDocumentApiController{service: s}
}

// Routes returns all of the api route for the DicEntryIdDocumentApiController
func (c *DicEntryIdDocumentApiController) Routes() Routes {
	return Routes{
		{
			"GetDicEntry",
			strings.ToUpper("Get"),
			"/nucmf-uecm/v1/dic-entries/{dicEntryId}",
			c.GetDicEntry,
		},
	}
}

// GetDicEntry - Get an individual dictionary entry via dicEntryId
func (c *DicEntryIdDocumentApiController) GetDicEntry(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	query := r.URL.Query()
	dicEntryId, err := parseInt32Parameter(params["dicEntryId"])
	if err != nil {
		w.WriteHeader(http.StatusBadRequest)
		return
	}

	racFormatStr := query.Get("rac-format")

	var racFormat RacFormat
	if err := json.Unmarshal([]byte(racFormatStr), &racFormat); err == nil {
		fmt.Println("RacFormat Unmarshal error!!")
	}

	result, err := c.service.GetDicEntry(r.Context(), dicEntryId, racFormat)
	//If an error occured, encode the error with the status code
	if err != nil {
		EncodeJSONResponse(err.Error(), &result.Code, w)
		return
	}
	//If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, w)

}
