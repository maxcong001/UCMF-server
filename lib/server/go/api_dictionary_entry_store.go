/*
 * Nucmf_UECapabilityManagement
 *
 * Nucmf_UECapabilityManagement Service. Â© 2020, 3GPP Organizational Partners (ARIB, ATIS, CCSA, ETSI, TSDSI, TTA, TTC). All rights reserved.
 *
 * API version: 1.0.2
 * Generated by: OpenAPI Generator (https://openapi-generator.tech)
 */

package openapi

import (
	"encoding/json"
	"fmt"
	"net/http"
	"strings"
)

// A DictionaryEntryStoreApiController binds http requests to an api service and writes the service results to the http response
type DictionaryEntryStoreApiController struct {
	service DictionaryEntryStoreApiServicer
}

// NewDictionaryEntryStoreApiController creates a default api controller
func NewDictionaryEntryStoreApiController(s DictionaryEntryStoreApiServicer) Router {
	return &DictionaryEntryStoreApiController{service: s}
}

// Routes returns all of the api route for the DictionaryEntryStoreApiController
func (c *DictionaryEntryStoreApiController) Routes() Routes {
	return Routes{
		{
			"RetrieveDictionaryEntry",
			strings.ToUpper("Get"),
			"/nucmf-uecm/v1/dic-entries",
			c.RetrieveDictionaryEntry,
		},
	}
}

// RetrieveDictionaryEntry - retrieve a dictionary entry matching query parameters
func (c *DictionaryEntryStoreApiController) RetrieveDictionaryEntry(w http.ResponseWriter, r *http.Request) {
	query := r.URL.Query()
	ueRadioCapaIDStr := query.Get("ue-radio-capa-id")
	racFormatStr := query.Get("rac-format")

	var ueRadioCapaId UeRadioCapaId
	if err := json.Unmarshal([]byte(ueRadioCapaIDStr), &ueRadioCapaId); err == nil {
		fmt.Println("UeRadioCapaId Unmarshal error!!")
	}

	var racFormat RacFormat
	if err := json.Unmarshal([]byte(racFormatStr), &racFormat); err == nil {
		fmt.Println("RacFormat Unmarshal error!!")
	}

	result, err := c.service.RetrieveDictionaryEntry(r.Context(), ueRadioCapaId, racFormat)
	//If an error occured, encode the error with the status code
	if err != nil {
		EncodeJSONResponse(err.Error(), &result.Code, w)
		return
	}
	//If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, w)

}
