/*
 * Nucmf_UECapabilityManagement
 *
 * Nucmf_UECapabilityManagement Service. Â© 2020, 3GPP Organizational Partners (ARIB, ATIS, CCSA, ETSI, TSDSI, TTA, TTC). All rights reserved. 
 *
 * API version: 1.0.2
 */

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// DicEntryData struct for DicEntryData
type DicEntryData struct {
	DicEntryId *int32 `json:"dicEntryId,omitempty"`
	TypeAllocationCode string `json:"typeAllocationCode"`
	PlmnAssiUeRadioCapId *string `json:"plmnAssiUeRadioCapId,omitempty"`
	ManAssiUeRadioCapId *string `json:"manAssiUeRadioCapId,omitempty"`
	UeRadioCapability5GS *RefToBinaryData `json:"ueRadioCapability5GS,omitempty"`
	UeRadioCapabilityEPS *RefToBinaryData `json:"ueRadioCapabilityEPS,omitempty"`
}

// NewDicEntryData instantiates a new DicEntryData object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewDicEntryData(typeAllocationCode string, ) *DicEntryData {
	this := DicEntryData{}
	this.TypeAllocationCode = typeAllocationCode
	return &this
}

// NewDicEntryDataWithDefaults instantiates a new DicEntryData object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewDicEntryDataWithDefaults() *DicEntryData {
	this := DicEntryData{}
	return &this
}

// GetDicEntryId returns the DicEntryId field value if set, zero value otherwise.
func (o *DicEntryData) GetDicEntryId() int32 {
	if o == nil || o.DicEntryId == nil {
		var ret int32
		return ret
	}
	return *o.DicEntryId
}

// GetDicEntryIdOk returns a tuple with the DicEntryId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DicEntryData) GetDicEntryIdOk() (*int32, bool) {
	if o == nil || o.DicEntryId == nil {
		return nil, false
	}
	return o.DicEntryId, true
}

// HasDicEntryId returns a boolean if a field has been set.
func (o *DicEntryData) HasDicEntryId() bool {
	if o != nil && o.DicEntryId != nil {
		return true
	}

	return false
}

// SetDicEntryId gets a reference to the given int32 and assigns it to the DicEntryId field.
func (o *DicEntryData) SetDicEntryId(v int32) {
	o.DicEntryId = &v
}

// GetTypeAllocationCode returns the TypeAllocationCode field value
func (o *DicEntryData) GetTypeAllocationCode() string {
	if o == nil  {
		var ret string
		return ret
	}

	return o.TypeAllocationCode
}

// GetTypeAllocationCodeOk returns a tuple with the TypeAllocationCode field value
// and a boolean to check if the value has been set.
func (o *DicEntryData) GetTypeAllocationCodeOk() (*string, bool) {
	if o == nil  {
		return nil, false
	}
	return &o.TypeAllocationCode, true
}

// SetTypeAllocationCode sets field value
func (o *DicEntryData) SetTypeAllocationCode(v string) {
	o.TypeAllocationCode = v
}

// GetPlmnAssiUeRadioCapId returns the PlmnAssiUeRadioCapId field value if set, zero value otherwise.
func (o *DicEntryData) GetPlmnAssiUeRadioCapId() string {
	if o == nil || o.PlmnAssiUeRadioCapId == nil {
		var ret string
		return ret
	}
	return *o.PlmnAssiUeRadioCapId
}

// GetPlmnAssiUeRadioCapIdOk returns a tuple with the PlmnAssiUeRadioCapId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DicEntryData) GetPlmnAssiUeRadioCapIdOk() (*string, bool) {
	if o == nil || o.PlmnAssiUeRadioCapId == nil {
		return nil, false
	}
	return o.PlmnAssiUeRadioCapId, true
}

// HasPlmnAssiUeRadioCapId returns a boolean if a field has been set.
func (o *DicEntryData) HasPlmnAssiUeRadioCapId() bool {
	if o != nil && o.PlmnAssiUeRadioCapId != nil {
		return true
	}

	return false
}

// SetPlmnAssiUeRadioCapId gets a reference to the given string and assigns it to the PlmnAssiUeRadioCapId field.
func (o *DicEntryData) SetPlmnAssiUeRadioCapId(v string) {
	o.PlmnAssiUeRadioCapId = &v
}

// GetManAssiUeRadioCapId returns the ManAssiUeRadioCapId field value if set, zero value otherwise.
func (o *DicEntryData) GetManAssiUeRadioCapId() string {
	if o == nil || o.ManAssiUeRadioCapId == nil {
		var ret string
		return ret
	}
	return *o.ManAssiUeRadioCapId
}

// GetManAssiUeRadioCapIdOk returns a tuple with the ManAssiUeRadioCapId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DicEntryData) GetManAssiUeRadioCapIdOk() (*string, bool) {
	if o == nil || o.ManAssiUeRadioCapId == nil {
		return nil, false
	}
	return o.ManAssiUeRadioCapId, true
}

// HasManAssiUeRadioCapId returns a boolean if a field has been set.
func (o *DicEntryData) HasManAssiUeRadioCapId() bool {
	if o != nil && o.ManAssiUeRadioCapId != nil {
		return true
	}

	return false
}

// SetManAssiUeRadioCapId gets a reference to the given string and assigns it to the ManAssiUeRadioCapId field.
func (o *DicEntryData) SetManAssiUeRadioCapId(v string) {
	o.ManAssiUeRadioCapId = &v
}

// GetUeRadioCapability5GS returns the UeRadioCapability5GS field value if set, zero value otherwise.
func (o *DicEntryData) GetUeRadioCapability5GS() RefToBinaryData {
	if o == nil || o.UeRadioCapability5GS == nil {
		var ret RefToBinaryData
		return ret
	}
	return *o.UeRadioCapability5GS
}

// GetUeRadioCapability5GSOk returns a tuple with the UeRadioCapability5GS field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DicEntryData) GetUeRadioCapability5GSOk() (*RefToBinaryData, bool) {
	if o == nil || o.UeRadioCapability5GS == nil {
		return nil, false
	}
	return o.UeRadioCapability5GS, true
}

// HasUeRadioCapability5GS returns a boolean if a field has been set.
func (o *DicEntryData) HasUeRadioCapability5GS() bool {
	if o != nil && o.UeRadioCapability5GS != nil {
		return true
	}

	return false
}

// SetUeRadioCapability5GS gets a reference to the given RefToBinaryData and assigns it to the UeRadioCapability5GS field.
func (o *DicEntryData) SetUeRadioCapability5GS(v RefToBinaryData) {
	o.UeRadioCapability5GS = &v
}

// GetUeRadioCapabilityEPS returns the UeRadioCapabilityEPS field value if set, zero value otherwise.
func (o *DicEntryData) GetUeRadioCapabilityEPS() RefToBinaryData {
	if o == nil || o.UeRadioCapabilityEPS == nil {
		var ret RefToBinaryData
		return ret
	}
	return *o.UeRadioCapabilityEPS
}

// GetUeRadioCapabilityEPSOk returns a tuple with the UeRadioCapabilityEPS field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DicEntryData) GetUeRadioCapabilityEPSOk() (*RefToBinaryData, bool) {
	if o == nil || o.UeRadioCapabilityEPS == nil {
		return nil, false
	}
	return o.UeRadioCapabilityEPS, true
}

// HasUeRadioCapabilityEPS returns a boolean if a field has been set.
func (o *DicEntryData) HasUeRadioCapabilityEPS() bool {
	if o != nil && o.UeRadioCapabilityEPS != nil {
		return true
	}

	return false
}

// SetUeRadioCapabilityEPS gets a reference to the given RefToBinaryData and assigns it to the UeRadioCapabilityEPS field.
func (o *DicEntryData) SetUeRadioCapabilityEPS(v RefToBinaryData) {
	o.UeRadioCapabilityEPS = &v
}

func (o DicEntryData) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.DicEntryId != nil {
		toSerialize["dicEntryId"] = o.DicEntryId
	}
	if true {
		toSerialize["typeAllocationCode"] = o.TypeAllocationCode
	}
	if o.PlmnAssiUeRadioCapId != nil {
		toSerialize["plmnAssiUeRadioCapId"] = o.PlmnAssiUeRadioCapId
	}
	if o.ManAssiUeRadioCapId != nil {
		toSerialize["manAssiUeRadioCapId"] = o.ManAssiUeRadioCapId
	}
	if o.UeRadioCapability5GS != nil {
		toSerialize["ueRadioCapability5GS"] = o.UeRadioCapability5GS
	}
	if o.UeRadioCapabilityEPS != nil {
		toSerialize["ueRadioCapabilityEPS"] = o.UeRadioCapabilityEPS
	}
	return json.Marshal(toSerialize)
}

type NullableDicEntryData struct {
	value *DicEntryData
	isSet bool
}

func (v NullableDicEntryData) Get() *DicEntryData {
	return v.value
}

func (v *NullableDicEntryData) Set(val *DicEntryData) {
	v.value = val
	v.isSet = true
}

func (v NullableDicEntryData) IsSet() bool {
	return v.isSet
}

func (v *NullableDicEntryData) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableDicEntryData(val *DicEntryData) *NullableDicEntryData {
	return &NullableDicEntryData{value: val, isSet: true}
}

func (v NullableDicEntryData) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableDicEntryData) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


